<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dreamtree.api.domain.student.mapper.StudentMapper">

    <!-- 임성현 ver.0.5 -->

    <resultMap id="studentDetail" type="studentDetailDTO">
        <id column="student_id" />
        <result property="url" column="url"/>
        <result property="major" column="major"/>
        <result property="college" column="college"/>
        <result property="authUrl" column="authUrl"/>
        <result property="gender" column="gender"/>
        <result property="nickname" column="nickname"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="authState" column="student_auth_state"/>
        <result property="role" column="role"/>
        <result property="profileImgUrl" column="profile_img_url"/>
        <result property="birth" column="birth"/>
        <result property="updatedAt" column="updatedAt"/>

        <collection property="certificateList" javaType="java.util.ArrayList" resultMap="certificateListTemp">  </collection>
    </resultMap>

    <resultMap id="certificateListTemp" type="studentCertificateListDTO">
        <result property="certificateId" column="certificate_id"/>
        <result property="name" column="name"/>
        <result property="aquireDate" column="aquire_date"/>
        <result property="url" column="certificate_url"/>
        <result property="authState" column="certificate_auth_state"/>
    </resultMap>

    <sql id="searchStudent">
        <where>
            deletedAt is null

            and
            (
            <if test="keyword != null and condition != null">
                <foreach collection="condition" item="item" index="index" open="(" close=")" separator="or">
                    <if test="item == 'nickname'">
                        nickname like concat('%', #{keyword}, '%')
                    </if>

                    <if test="item == 'email'">
                        email like concat('%', #{keyword}, '%')
                    </if>

                    <if test="item == 'authState'">
                        auth_state like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            )
        </where>
    </sql>

    <sql id="searchCollege">
        <where>
            deletedAt is null
            and
            auth_state = 'pending'

            and
            (
            <if test="keyword != null and condition != null">
                <foreach collection="condition" item="item" index="index" open="(" close=")" separator="or">
                    <if test="item == 'nickname'">
                        nickname like concat('%', #{keyword}, '%')
                    </if>

                    <if test="item == 'email'">
                        email like concat('%', #{keyword}, '%')
                    </if>
                    <if test="item == 'authState'">
                        auth_state like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            )
        </where>
    </sql>

    <sql id="searchCertificate">
        <where>
            s.deletedAt is null
            and
            c.auth_state = 'pending'

            and
            (
            <if test="keyword != null and condition != null">
                <foreach collection="condition" item="item" index="index" open="(" close=")" separator="or">
                    <if test="item == 'nickname'">
                        s.nickname like concat('%', #{keyword}, '%')
                    </if>

                    <if test="item == 'email'">
                        s.email like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            )
        </where>
    </sql>

    <!-- 학생 추가 -->
    <insert id="addStudent">
        insert into tbl_student (
            profile_img_url,
            role,
            auth_state,
            email,
            password,
            nickname,
            birth,
            gender,
            createdAt,
            updatedAt
        )
        values (
            #{profileImgUrl},
            'student',
            'no',
            #{email},
            #{password},
            #{nickname},
            #{birth},
            #{gender},
            now(),
            now()
        )
    </insert>

    <!-- 학생 학교 정보 추가 -->
    <update id="addStudentFile">
        update
            tbl_student
        set
            college = #{college},
            major = #{major},
            url = #{url},
            updatedAt = now(),
            auth_state = 'pending',
            requestedAt = now()
        where
            student_id = #{studentId}
    </update>

    <!-- 학생 학교 정보 조회 -->
    <select id="getStudentCollege" resultType="studentCollegeDTO">
        select
            auth_url,
            college,
            major,
            url
        from
            tbl_student
        where
            student_id = #{id}
    </select>

    <!-- 학생 1명 with 자격증 조회 -->
    <select id="getStudent" resultMap="studentDetail" parameterType="long">
        select
            s.student_id,
            s.profile_img_url,
            s.role,
            s.auth_state as student_auth_state,
            s.email,
            s.nickname,
            s.password,
            s.birth,
            s.gender,
            s.auth_url,
            s.college,
            s.major,
            s.url,
            s.createdAt,
            s.updatedAt,
            c.certificate_id,
            c.name,
            c.aquire_date,
            c.url as certificate_url,
            c.auth_state as certificate_auth_state
        from
            tbl_student s
        left join tbl_certificate c on s.student_id = c.student_id
        where
            s.student_id = #{id} and
            s.deletedAt is null and
            c.deletedAt is null
    </select>

    <!-- 학생 전체 검색 -->
    <select id="getStudentList" resultType="studentDTO">
        select *
        from
            tbl_student
        where
            deletedAt is null

        order by student_id desc
        limit #{skip}, #{size}
    </select>

    <!-- 학생 키워드 검색(전체, 이메일, 닉네임, 인증상태 -->
    <select id="getSearchStudentList" parameterType="studentRequestDTO" resultType="studentListDTO">
        select
            student_id,
            profile_img_url,
            nickname,
            email,
            auth_state
        from
            tbl_student

        <include refid="searchStudent"></include>
        
        order by student_id desc
        limit #{skip}, #{size}
    </select>

    <!-- 학생 1명 삭제 -->
    <update id="removeStudent">
        update
            tbl_student
        set
            deletedAt = now()
        where
            student_id = #{id}
    </update>

    <!-- 학생 1명 수정 -->
    <update id="modifyStudent">
        update
            tbl_student
        set
            profile_img_url = #{profileImgUrl},
            password = #{password},
            nickname = #{nickname},
            birth = #{birth},
            gender = #{gender},
            updatedAt = now()
        where
            student_id = #{studentId}
    </update>

    <!-- 학교인증 요청 리스트 -->
    <select id="getSearchCollegeAuthRequestList" parameterType="studentRequestDTO" resultType="studentAuthRequestDTO">
        select
            student_id as id,
            nickname,
            email,
            auth_state
        from
            tbl_student

        <include refid="searchCollege"></include>

        order by requestedAt desc
        limit #{skip}, #{size}
    </select>

    <!-- 자격/수상 인증 요청 리스트 -->
    <select id="getSearchCertificateAuthRequestList" parameterType="studentRequestDTO" resultType="studentAuthRequestDTO">
        select
            c.certificate_id as id,
            s.nickname,
            s.email,
            c.auth_state
        from
            tbl_student s
        left join tbl_certificate c on s.student_id = c.student_id

        <include refid="searchCertificate"></include>

        order by c.updatedAt desc
        limit #{skip}, #{size}
    </select>

    <!-- 학생 학교인증 상태 업데이트 -->
    <update id="modifyStudentAuthState">
        update
            tbl_student
        set
            auth_state = #{authState},
            updatedAt = now()
        where
            student_id = #{id}
    </update>

    <select id="getStudentListCount" resultType="integer">
        select
            count(*)
        from
            tbl_student

        <include refid="searchStudent"></include>
    </select>

    <select id="getCollegeListCount" resultType="integer">
        select
            count(*)
        from
            tbl_student

        <include refid="searchCollege"></include>
    </select>

    <select id="getCertificateListCount" resultType="integer">
        select
            count(*)
        from
            tbl_student s left join tbl_certificate c on s.student_id = c.student_id

        <include refid="searchCertificate"></include>
    </select>

    <!-- 대학 인증 요청 카운트 -->
    <select id="getCollegeAuthCount" resultType="int">
        select
            count(*)
        from
            tbl_student
        where
            auth_state = 'pending'
    </select>


</mapper>